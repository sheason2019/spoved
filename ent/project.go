// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sheason2019/spoved/ent/project"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProjectName holds the value of the "project_name" field.
	ProjectName string `json:"project_name,omitempty"`
	// Describe holds the value of the "describe" field.
	Describe string `json:"describe,omitempty"`
	// GitURL holds the value of the "git_url" field.
	GitURL string `json:"git_url,omitempty"`
	// DirPath holds the value of the "dir_path" field.
	DirPath string `json:"dir_path,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges ProjectEdges `json:"edges"`
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// CompileRecords holds the value of the compile_records edge.
	CompileRecords []*CompileRecord `json:"compile_records,omitempty"`
	// Creator holds the value of the creator edge.
	Creator []*User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CompileRecordsOrErr returns the CompileRecords value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) CompileRecordsOrErr() ([]*CompileRecord, error) {
	if e.loadedTypes[0] {
		return e.CompileRecords, nil
	}
	return nil, &NotLoadedError{edge: "compile_records"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) CreatorOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			values[i] = new(sql.NullInt64)
		case project.FieldProjectName, project.FieldDescribe, project.FieldGitURL, project.FieldDirPath:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Project", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldProjectName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_name", values[i])
			} else if value.Valid {
				pr.ProjectName = value.String
			}
		case project.FieldDescribe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field describe", values[i])
			} else if value.Valid {
				pr.Describe = value.String
			}
		case project.FieldGitURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_url", values[i])
			} else if value.Valid {
				pr.GitURL = value.String
			}
		case project.FieldDirPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dir_path", values[i])
			} else if value.Valid {
				pr.DirPath = value.String
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCompileRecords queries the "compile_records" edge of the Project entity.
func (pr *Project) QueryCompileRecords() *CompileRecordQuery {
	return NewProjectClient(pr.config).QueryCompileRecords(pr)
}

// QueryCreator queries the "creator" edge of the Project entity.
func (pr *Project) QueryCreator() *UserQuery {
	return NewProjectClient(pr.config).QueryCreator(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("project_name=")
	builder.WriteString(pr.ProjectName)
	builder.WriteString(", ")
	builder.WriteString("describe=")
	builder.WriteString(pr.Describe)
	builder.WriteString(", ")
	builder.WriteString("git_url=")
	builder.WriteString(pr.GitURL)
	builder.WriteString(", ")
	builder.WriteString("dir_path=")
	builder.WriteString(pr.DirPath)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project

func (pr Projects) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
