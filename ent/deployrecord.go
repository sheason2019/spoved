// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sheason2019/spoved/ent/deployrecord"
)

// DeployRecord is the model entity for the DeployRecord schema.
type DeployRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode int `json:"status_code,omitempty"`
	// ContainerHash holds the value of the "container_hash" field.
	ContainerHash string `json:"container_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeployRecordQuery when eager-loading is set.
	Edges DeployRecordEdges `json:"edges"`
}

// DeployRecordEdges holds the relations/edges for other nodes in the graph.
type DeployRecordEdges struct {
	// Operator holds the value of the operator edge.
	Operator []*User `json:"operator,omitempty"`
	// CompileRecord holds the value of the compile_record edge.
	CompileRecord []*CompileRecord `json:"compile_record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading.
func (e DeployRecordEdges) OperatorOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Operator, nil
	}
	return nil, &NotLoadedError{edge: "operator"}
}

// CompileRecordOrErr returns the CompileRecord value or an error if the edge
// was not loaded in eager-loading.
func (e DeployRecordEdges) CompileRecordOrErr() ([]*CompileRecord, error) {
	if e.loadedTypes[1] {
		return e.CompileRecord, nil
	}
	return nil, &NotLoadedError{edge: "compile_record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeployRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deployrecord.FieldID, deployrecord.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case deployrecord.FieldImage, deployrecord.FieldContainerHash:
			values[i] = new(sql.NullString)
		case deployrecord.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeployRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeployRecord fields.
func (dr *DeployRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deployrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dr.ID = int(value.Int64)
		case deployrecord.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				dr.Image = value.String
			}
		case deployrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dr.CreatedAt = value.Time
			}
		case deployrecord.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				dr.StatusCode = int(value.Int64)
			}
		case deployrecord.FieldContainerHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field container_hash", values[i])
			} else if value.Valid {
				dr.ContainerHash = value.String
			}
		}
	}
	return nil
}

// QueryOperator queries the "operator" edge of the DeployRecord entity.
func (dr *DeployRecord) QueryOperator() *UserQuery {
	return NewDeployRecordClient(dr.config).QueryOperator(dr)
}

// QueryCompileRecord queries the "compile_record" edge of the DeployRecord entity.
func (dr *DeployRecord) QueryCompileRecord() *CompileRecordQuery {
	return NewDeployRecordClient(dr.config).QueryCompileRecord(dr)
}

// Update returns a builder for updating this DeployRecord.
// Note that you need to call DeployRecord.Unwrap() before calling this method if this DeployRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DeployRecord) Update() *DeployRecordUpdateOne {
	return NewDeployRecordClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DeployRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DeployRecord) Unwrap() *DeployRecord {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeployRecord is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DeployRecord) String() string {
	var builder strings.Builder
	builder.WriteString("DeployRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dr.ID))
	builder.WriteString("image=")
	builder.WriteString(dr.Image)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", dr.StatusCode))
	builder.WriteString(", ")
	builder.WriteString("container_hash=")
	builder.WriteString(dr.ContainerHash)
	builder.WriteByte(')')
	return builder.String()
}

// DeployRecords is a parsable slice of DeployRecord.
type DeployRecords []*DeployRecord

func (dr DeployRecords) config(cfg config) {
	for _i := range dr {
		dr[_i].config = cfg
	}
}
