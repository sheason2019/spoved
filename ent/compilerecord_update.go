// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sheason2019/spoved/ent/compilerecord"
	"github.com/sheason2019/spoved/ent/deployrecord"
	"github.com/sheason2019/spoved/ent/predicate"
	"github.com/sheason2019/spoved/ent/project"
	"github.com/sheason2019/spoved/ent/user"
)

// CompileRecordUpdate is the builder for updating CompileRecord entities.
type CompileRecordUpdate struct {
	config
	hooks    []Hook
	mutation *CompileRecordMutation
}

// Where appends a list predicates to the CompileRecordUpdate builder.
func (cru *CompileRecordUpdate) Where(ps ...predicate.CompileRecord) *CompileRecordUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetVersion sets the "version" field.
func (cru *CompileRecordUpdate) SetVersion(s string) *CompileRecordUpdate {
	cru.mutation.SetVersion(s)
	return cru
}

// SetImage sets the "image" field.
func (cru *CompileRecordUpdate) SetImage(s string) *CompileRecordUpdate {
	cru.mutation.SetImage(s)
	return cru
}

// SetCreatedAt sets the "created_at" field.
func (cru *CompileRecordUpdate) SetCreatedAt(t time.Time) *CompileRecordUpdate {
	cru.mutation.SetCreatedAt(t)
	return cru
}

// SetStatusCode sets the "status_code" field.
func (cru *CompileRecordUpdate) SetStatusCode(i int) *CompileRecordUpdate {
	cru.mutation.ResetStatusCode()
	cru.mutation.SetStatusCode(i)
	return cru
}

// AddStatusCode adds i to the "status_code" field.
func (cru *CompileRecordUpdate) AddStatusCode(i int) *CompileRecordUpdate {
	cru.mutation.AddStatusCode(i)
	return cru
}

// SetOutput sets the "output" field.
func (cru *CompileRecordUpdate) SetOutput(s string) *CompileRecordUpdate {
	cru.mutation.SetOutput(s)
	return cru
}

// SetBranch sets the "branch" field.
func (cru *CompileRecordUpdate) SetBranch(s string) *CompileRecordUpdate {
	cru.mutation.SetBranch(s)
	return cru
}

// AddOperatorIDs adds the "operator" edge to the User entity by IDs.
func (cru *CompileRecordUpdate) AddOperatorIDs(ids ...int) *CompileRecordUpdate {
	cru.mutation.AddOperatorIDs(ids...)
	return cru
}

// AddOperator adds the "operator" edges to the User entity.
func (cru *CompileRecordUpdate) AddOperator(u ...*User) *CompileRecordUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cru.AddOperatorIDs(ids...)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (cru *CompileRecordUpdate) AddProjectIDs(ids ...int) *CompileRecordUpdate {
	cru.mutation.AddProjectIDs(ids...)
	return cru
}

// AddProject adds the "project" edges to the Project entity.
func (cru *CompileRecordUpdate) AddProject(p ...*Project) *CompileRecordUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cru.AddProjectIDs(ids...)
}

// AddDeployRecordIDs adds the "deploy_records" edge to the DeployRecord entity by IDs.
func (cru *CompileRecordUpdate) AddDeployRecordIDs(ids ...int) *CompileRecordUpdate {
	cru.mutation.AddDeployRecordIDs(ids...)
	return cru
}

// AddDeployRecords adds the "deploy_records" edges to the DeployRecord entity.
func (cru *CompileRecordUpdate) AddDeployRecords(d ...*DeployRecord) *CompileRecordUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cru.AddDeployRecordIDs(ids...)
}

// Mutation returns the CompileRecordMutation object of the builder.
func (cru *CompileRecordUpdate) Mutation() *CompileRecordMutation {
	return cru.mutation
}

// ClearOperator clears all "operator" edges to the User entity.
func (cru *CompileRecordUpdate) ClearOperator() *CompileRecordUpdate {
	cru.mutation.ClearOperator()
	return cru
}

// RemoveOperatorIDs removes the "operator" edge to User entities by IDs.
func (cru *CompileRecordUpdate) RemoveOperatorIDs(ids ...int) *CompileRecordUpdate {
	cru.mutation.RemoveOperatorIDs(ids...)
	return cru
}

// RemoveOperator removes "operator" edges to User entities.
func (cru *CompileRecordUpdate) RemoveOperator(u ...*User) *CompileRecordUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cru.RemoveOperatorIDs(ids...)
}

// ClearProject clears all "project" edges to the Project entity.
func (cru *CompileRecordUpdate) ClearProject() *CompileRecordUpdate {
	cru.mutation.ClearProject()
	return cru
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (cru *CompileRecordUpdate) RemoveProjectIDs(ids ...int) *CompileRecordUpdate {
	cru.mutation.RemoveProjectIDs(ids...)
	return cru
}

// RemoveProject removes "project" edges to Project entities.
func (cru *CompileRecordUpdate) RemoveProject(p ...*Project) *CompileRecordUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cru.RemoveProjectIDs(ids...)
}

// ClearDeployRecords clears all "deploy_records" edges to the DeployRecord entity.
func (cru *CompileRecordUpdate) ClearDeployRecords() *CompileRecordUpdate {
	cru.mutation.ClearDeployRecords()
	return cru
}

// RemoveDeployRecordIDs removes the "deploy_records" edge to DeployRecord entities by IDs.
func (cru *CompileRecordUpdate) RemoveDeployRecordIDs(ids ...int) *CompileRecordUpdate {
	cru.mutation.RemoveDeployRecordIDs(ids...)
	return cru
}

// RemoveDeployRecords removes "deploy_records" edges to DeployRecord entities.
func (cru *CompileRecordUpdate) RemoveDeployRecords(d ...*DeployRecord) *CompileRecordUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cru.RemoveDeployRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CompileRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CompileRecordMutation](ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CompileRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CompileRecordUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CompileRecordUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cru *CompileRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   compilerecord.Table,
			Columns: compilerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: compilerecord.FieldID,
			},
		},
	}
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Version(); ok {
		_spec.SetField(compilerecord.FieldVersion, field.TypeString, value)
	}
	if value, ok := cru.mutation.Image(); ok {
		_spec.SetField(compilerecord.FieldImage, field.TypeString, value)
	}
	if value, ok := cru.mutation.CreatedAt(); ok {
		_spec.SetField(compilerecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cru.mutation.StatusCode(); ok {
		_spec.SetField(compilerecord.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := cru.mutation.AddedStatusCode(); ok {
		_spec.AddField(compilerecord.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := cru.mutation.Output(); ok {
		_spec.SetField(compilerecord.FieldOutput, field.TypeString, value)
	}
	if value, ok := cru.mutation.Branch(); ok {
		_spec.SetField(compilerecord.FieldBranch, field.TypeString, value)
	}
	if cru.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.OperatorTable,
			Columns: compilerecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedOperatorIDs(); len(nodes) > 0 && !cru.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.OperatorTable,
			Columns: compilerecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.OperatorTable,
			Columns: compilerecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.ProjectTable,
			Columns: compilerecord.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedProjectIDs(); len(nodes) > 0 && !cru.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.ProjectTable,
			Columns: compilerecord.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.ProjectTable,
			Columns: compilerecord.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.DeployRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   compilerecord.DeployRecordsTable,
			Columns: compilerecord.DeployRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedDeployRecordsIDs(); len(nodes) > 0 && !cru.mutation.DeployRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   compilerecord.DeployRecordsTable,
			Columns: compilerecord.DeployRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.DeployRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   compilerecord.DeployRecordsTable,
			Columns: compilerecord.DeployRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{compilerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CompileRecordUpdateOne is the builder for updating a single CompileRecord entity.
type CompileRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompileRecordMutation
}

// SetVersion sets the "version" field.
func (cruo *CompileRecordUpdateOne) SetVersion(s string) *CompileRecordUpdateOne {
	cruo.mutation.SetVersion(s)
	return cruo
}

// SetImage sets the "image" field.
func (cruo *CompileRecordUpdateOne) SetImage(s string) *CompileRecordUpdateOne {
	cruo.mutation.SetImage(s)
	return cruo
}

// SetCreatedAt sets the "created_at" field.
func (cruo *CompileRecordUpdateOne) SetCreatedAt(t time.Time) *CompileRecordUpdateOne {
	cruo.mutation.SetCreatedAt(t)
	return cruo
}

// SetStatusCode sets the "status_code" field.
func (cruo *CompileRecordUpdateOne) SetStatusCode(i int) *CompileRecordUpdateOne {
	cruo.mutation.ResetStatusCode()
	cruo.mutation.SetStatusCode(i)
	return cruo
}

// AddStatusCode adds i to the "status_code" field.
func (cruo *CompileRecordUpdateOne) AddStatusCode(i int) *CompileRecordUpdateOne {
	cruo.mutation.AddStatusCode(i)
	return cruo
}

// SetOutput sets the "output" field.
func (cruo *CompileRecordUpdateOne) SetOutput(s string) *CompileRecordUpdateOne {
	cruo.mutation.SetOutput(s)
	return cruo
}

// SetBranch sets the "branch" field.
func (cruo *CompileRecordUpdateOne) SetBranch(s string) *CompileRecordUpdateOne {
	cruo.mutation.SetBranch(s)
	return cruo
}

// AddOperatorIDs adds the "operator" edge to the User entity by IDs.
func (cruo *CompileRecordUpdateOne) AddOperatorIDs(ids ...int) *CompileRecordUpdateOne {
	cruo.mutation.AddOperatorIDs(ids...)
	return cruo
}

// AddOperator adds the "operator" edges to the User entity.
func (cruo *CompileRecordUpdateOne) AddOperator(u ...*User) *CompileRecordUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cruo.AddOperatorIDs(ids...)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (cruo *CompileRecordUpdateOne) AddProjectIDs(ids ...int) *CompileRecordUpdateOne {
	cruo.mutation.AddProjectIDs(ids...)
	return cruo
}

// AddProject adds the "project" edges to the Project entity.
func (cruo *CompileRecordUpdateOne) AddProject(p ...*Project) *CompileRecordUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cruo.AddProjectIDs(ids...)
}

// AddDeployRecordIDs adds the "deploy_records" edge to the DeployRecord entity by IDs.
func (cruo *CompileRecordUpdateOne) AddDeployRecordIDs(ids ...int) *CompileRecordUpdateOne {
	cruo.mutation.AddDeployRecordIDs(ids...)
	return cruo
}

// AddDeployRecords adds the "deploy_records" edges to the DeployRecord entity.
func (cruo *CompileRecordUpdateOne) AddDeployRecords(d ...*DeployRecord) *CompileRecordUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cruo.AddDeployRecordIDs(ids...)
}

// Mutation returns the CompileRecordMutation object of the builder.
func (cruo *CompileRecordUpdateOne) Mutation() *CompileRecordMutation {
	return cruo.mutation
}

// ClearOperator clears all "operator" edges to the User entity.
func (cruo *CompileRecordUpdateOne) ClearOperator() *CompileRecordUpdateOne {
	cruo.mutation.ClearOperator()
	return cruo
}

// RemoveOperatorIDs removes the "operator" edge to User entities by IDs.
func (cruo *CompileRecordUpdateOne) RemoveOperatorIDs(ids ...int) *CompileRecordUpdateOne {
	cruo.mutation.RemoveOperatorIDs(ids...)
	return cruo
}

// RemoveOperator removes "operator" edges to User entities.
func (cruo *CompileRecordUpdateOne) RemoveOperator(u ...*User) *CompileRecordUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cruo.RemoveOperatorIDs(ids...)
}

// ClearProject clears all "project" edges to the Project entity.
func (cruo *CompileRecordUpdateOne) ClearProject() *CompileRecordUpdateOne {
	cruo.mutation.ClearProject()
	return cruo
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (cruo *CompileRecordUpdateOne) RemoveProjectIDs(ids ...int) *CompileRecordUpdateOne {
	cruo.mutation.RemoveProjectIDs(ids...)
	return cruo
}

// RemoveProject removes "project" edges to Project entities.
func (cruo *CompileRecordUpdateOne) RemoveProject(p ...*Project) *CompileRecordUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cruo.RemoveProjectIDs(ids...)
}

// ClearDeployRecords clears all "deploy_records" edges to the DeployRecord entity.
func (cruo *CompileRecordUpdateOne) ClearDeployRecords() *CompileRecordUpdateOne {
	cruo.mutation.ClearDeployRecords()
	return cruo
}

// RemoveDeployRecordIDs removes the "deploy_records" edge to DeployRecord entities by IDs.
func (cruo *CompileRecordUpdateOne) RemoveDeployRecordIDs(ids ...int) *CompileRecordUpdateOne {
	cruo.mutation.RemoveDeployRecordIDs(ids...)
	return cruo
}

// RemoveDeployRecords removes "deploy_records" edges to DeployRecord entities.
func (cruo *CompileRecordUpdateOne) RemoveDeployRecords(d ...*DeployRecord) *CompileRecordUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cruo.RemoveDeployRecordIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CompileRecordUpdateOne) Select(field string, fields ...string) *CompileRecordUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CompileRecord entity.
func (cruo *CompileRecordUpdateOne) Save(ctx context.Context) (*CompileRecord, error) {
	return withHooks[*CompileRecord, CompileRecordMutation](ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CompileRecordUpdateOne) SaveX(ctx context.Context) *CompileRecord {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CompileRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CompileRecordUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cruo *CompileRecordUpdateOne) sqlSave(ctx context.Context) (_node *CompileRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   compilerecord.Table,
			Columns: compilerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: compilerecord.FieldID,
			},
		},
	}
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompileRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, compilerecord.FieldID)
		for _, f := range fields {
			if !compilerecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != compilerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Version(); ok {
		_spec.SetField(compilerecord.FieldVersion, field.TypeString, value)
	}
	if value, ok := cruo.mutation.Image(); ok {
		_spec.SetField(compilerecord.FieldImage, field.TypeString, value)
	}
	if value, ok := cruo.mutation.CreatedAt(); ok {
		_spec.SetField(compilerecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cruo.mutation.StatusCode(); ok {
		_spec.SetField(compilerecord.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.AddedStatusCode(); ok {
		_spec.AddField(compilerecord.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.Output(); ok {
		_spec.SetField(compilerecord.FieldOutput, field.TypeString, value)
	}
	if value, ok := cruo.mutation.Branch(); ok {
		_spec.SetField(compilerecord.FieldBranch, field.TypeString, value)
	}
	if cruo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.OperatorTable,
			Columns: compilerecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedOperatorIDs(); len(nodes) > 0 && !cruo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.OperatorTable,
			Columns: compilerecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.OperatorTable,
			Columns: compilerecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.ProjectTable,
			Columns: compilerecord.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedProjectIDs(); len(nodes) > 0 && !cruo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.ProjectTable,
			Columns: compilerecord.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.ProjectTable,
			Columns: compilerecord.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.DeployRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   compilerecord.DeployRecordsTable,
			Columns: compilerecord.DeployRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedDeployRecordsIDs(); len(nodes) > 0 && !cruo.mutation.DeployRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   compilerecord.DeployRecordsTable,
			Columns: compilerecord.DeployRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.DeployRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   compilerecord.DeployRecordsTable,
			Columns: compilerecord.DeployRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompileRecord{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{compilerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
