// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sheason2019/spoved/ent/compilerecord"
	"github.com/sheason2019/spoved/ent/predicate"
	"github.com/sheason2019/spoved/ent/project"
	"github.com/sheason2019/spoved/ent/user"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetProjectName sets the "project_name" field.
func (pu *ProjectUpdate) SetProjectName(s string) *ProjectUpdate {
	pu.mutation.SetProjectName(s)
	return pu
}

// SetDescribe sets the "describe" field.
func (pu *ProjectUpdate) SetDescribe(s string) *ProjectUpdate {
	pu.mutation.SetDescribe(s)
	return pu
}

// SetGitURL sets the "git_url" field.
func (pu *ProjectUpdate) SetGitURL(s string) *ProjectUpdate {
	pu.mutation.SetGitURL(s)
	return pu
}

// SetDirPath sets the "dir_path" field.
func (pu *ProjectUpdate) SetDirPath(s string) *ProjectUpdate {
	pu.mutation.SetDirPath(s)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProjectUpdate) SetCreatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// AddCompileRecordIDs adds the "compile_records" edge to the CompileRecord entity by IDs.
func (pu *ProjectUpdate) AddCompileRecordIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddCompileRecordIDs(ids...)
	return pu
}

// AddCompileRecords adds the "compile_records" edges to the CompileRecord entity.
func (pu *ProjectUpdate) AddCompileRecords(c ...*CompileRecord) *ProjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCompileRecordIDs(ids...)
}

// AddCreatorIDs adds the "creator" edge to the User entity by IDs.
func (pu *ProjectUpdate) AddCreatorIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddCreatorIDs(ids...)
	return pu
}

// AddCreator adds the "creator" edges to the User entity.
func (pu *ProjectUpdate) AddCreator(u ...*User) *ProjectUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddCreatorIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearCompileRecords clears all "compile_records" edges to the CompileRecord entity.
func (pu *ProjectUpdate) ClearCompileRecords() *ProjectUpdate {
	pu.mutation.ClearCompileRecords()
	return pu
}

// RemoveCompileRecordIDs removes the "compile_records" edge to CompileRecord entities by IDs.
func (pu *ProjectUpdate) RemoveCompileRecordIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveCompileRecordIDs(ids...)
	return pu
}

// RemoveCompileRecords removes "compile_records" edges to CompileRecord entities.
func (pu *ProjectUpdate) RemoveCompileRecords(c ...*CompileRecord) *ProjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCompileRecordIDs(ids...)
}

// ClearCreator clears all "creator" edges to the User entity.
func (pu *ProjectUpdate) ClearCreator() *ProjectUpdate {
	pu.mutation.ClearCreator()
	return pu
}

// RemoveCreatorIDs removes the "creator" edge to User entities by IDs.
func (pu *ProjectUpdate) RemoveCreatorIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveCreatorIDs(ids...)
	return pu
}

// RemoveCreator removes "creator" edges to User entities.
func (pu *ProjectUpdate) RemoveCreator(u ...*User) *ProjectUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveCreatorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProjectMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.ProjectName(); ok {
		_spec.SetField(project.FieldProjectName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Describe(); ok {
		_spec.SetField(project.FieldDescribe, field.TypeString, value)
	}
	if value, ok := pu.mutation.GitURL(); ok {
		_spec.SetField(project.FieldGitURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.DirPath(); ok {
		_spec.SetField(project.FieldDirPath, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
	}
	if pu.mutation.CompileRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.CompileRecordsTable,
			Columns: project.CompileRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCompileRecordsIDs(); len(nodes) > 0 && !pu.mutation.CompileRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.CompileRecordsTable,
			Columns: project.CompileRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CompileRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.CompileRecordsTable,
			Columns: project.CompileRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CreatorTable,
			Columns: project.CreatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCreatorIDs(); len(nodes) > 0 && !pu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CreatorTable,
			Columns: project.CreatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CreatorTable,
			Columns: project.CreatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetProjectName sets the "project_name" field.
func (puo *ProjectUpdateOne) SetProjectName(s string) *ProjectUpdateOne {
	puo.mutation.SetProjectName(s)
	return puo
}

// SetDescribe sets the "describe" field.
func (puo *ProjectUpdateOne) SetDescribe(s string) *ProjectUpdateOne {
	puo.mutation.SetDescribe(s)
	return puo
}

// SetGitURL sets the "git_url" field.
func (puo *ProjectUpdateOne) SetGitURL(s string) *ProjectUpdateOne {
	puo.mutation.SetGitURL(s)
	return puo
}

// SetDirPath sets the "dir_path" field.
func (puo *ProjectUpdateOne) SetDirPath(s string) *ProjectUpdateOne {
	puo.mutation.SetDirPath(s)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProjectUpdateOne) SetCreatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// AddCompileRecordIDs adds the "compile_records" edge to the CompileRecord entity by IDs.
func (puo *ProjectUpdateOne) AddCompileRecordIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddCompileRecordIDs(ids...)
	return puo
}

// AddCompileRecords adds the "compile_records" edges to the CompileRecord entity.
func (puo *ProjectUpdateOne) AddCompileRecords(c ...*CompileRecord) *ProjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCompileRecordIDs(ids...)
}

// AddCreatorIDs adds the "creator" edge to the User entity by IDs.
func (puo *ProjectUpdateOne) AddCreatorIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddCreatorIDs(ids...)
	return puo
}

// AddCreator adds the "creator" edges to the User entity.
func (puo *ProjectUpdateOne) AddCreator(u ...*User) *ProjectUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddCreatorIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearCompileRecords clears all "compile_records" edges to the CompileRecord entity.
func (puo *ProjectUpdateOne) ClearCompileRecords() *ProjectUpdateOne {
	puo.mutation.ClearCompileRecords()
	return puo
}

// RemoveCompileRecordIDs removes the "compile_records" edge to CompileRecord entities by IDs.
func (puo *ProjectUpdateOne) RemoveCompileRecordIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveCompileRecordIDs(ids...)
	return puo
}

// RemoveCompileRecords removes "compile_records" edges to CompileRecord entities.
func (puo *ProjectUpdateOne) RemoveCompileRecords(c ...*CompileRecord) *ProjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCompileRecordIDs(ids...)
}

// ClearCreator clears all "creator" edges to the User entity.
func (puo *ProjectUpdateOne) ClearCreator() *ProjectUpdateOne {
	puo.mutation.ClearCreator()
	return puo
}

// RemoveCreatorIDs removes the "creator" edge to User entities by IDs.
func (puo *ProjectUpdateOne) RemoveCreatorIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveCreatorIDs(ids...)
	return puo
}

// RemoveCreator removes "creator" edges to User entities.
func (puo *ProjectUpdateOne) RemoveCreator(u ...*User) *ProjectUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveCreatorIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks[*Project, ProjectMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.ProjectName(); ok {
		_spec.SetField(project.FieldProjectName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Describe(); ok {
		_spec.SetField(project.FieldDescribe, field.TypeString, value)
	}
	if value, ok := puo.mutation.GitURL(); ok {
		_spec.SetField(project.FieldGitURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.DirPath(); ok {
		_spec.SetField(project.FieldDirPath, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
	}
	if puo.mutation.CompileRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.CompileRecordsTable,
			Columns: project.CompileRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCompileRecordsIDs(); len(nodes) > 0 && !puo.mutation.CompileRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.CompileRecordsTable,
			Columns: project.CompileRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CompileRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.CompileRecordsTable,
			Columns: project.CompileRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CreatorTable,
			Columns: project.CreatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCreatorIDs(); len(nodes) > 0 && !puo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CreatorTable,
			Columns: project.CreatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.CreatorTable,
			Columns: project.CreatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
