// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/sheason2019/spoved/ent/gitrepo"
)

// GitRepo is the model entity for the GitRepo schema.
type GitRepo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GitURL holds the value of the "git_url" field.
	GitURL string `json:"git_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GitRepoQuery when eager-loading is set.
	Edges GitRepoEdges `json:"edges"`
}

// GitRepoEdges holds the relations/edges for other nodes in the graph.
type GitRepoEdges struct {
	// Projects holds the value of the projects edge.
	Projects []*Project `json:"projects,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e GitRepoEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[0] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GitRepo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gitrepo.FieldID:
			values[i] = new(sql.NullInt64)
		case gitrepo.FieldGitURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GitRepo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GitRepo fields.
func (gr *GitRepo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gitrepo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case gitrepo.FieldGitURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_url", values[i])
			} else if value.Valid {
				gr.GitURL = value.String
			}
		}
	}
	return nil
}

// QueryProjects queries the "projects" edge of the GitRepo entity.
func (gr *GitRepo) QueryProjects() *ProjectQuery {
	return NewGitRepoClient(gr.config).QueryProjects(gr)
}

// Update returns a builder for updating this GitRepo.
// Note that you need to call GitRepo.Unwrap() before calling this method if this GitRepo
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GitRepo) Update() *GitRepoUpdateOne {
	return NewGitRepoClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the GitRepo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GitRepo) Unwrap() *GitRepo {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GitRepo is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GitRepo) String() string {
	var builder strings.Builder
	builder.WriteString("GitRepo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("git_url=")
	builder.WriteString(gr.GitURL)
	builder.WriteByte(')')
	return builder.String()
}

// GitRepos is a parsable slice of GitRepo.
type GitRepos []*GitRepo

func (gr GitRepos) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
