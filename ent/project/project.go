// Code generated by ent, DO NOT EDIT.

package project

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectName holds the string denoting the project_name field in the database.
	FieldProjectName = "project_name"
	// FieldDescribe holds the string denoting the describe field in the database.
	FieldDescribe = "describe"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeGitRepo holds the string denoting the git_repo edge name in mutations.
	EdgeGitRepo = "git_repo"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// GitRepoTable is the table that holds the git_repo relation/edge. The primary key declared below.
	GitRepoTable = "git_repo_projects"
	// GitRepoInverseTable is the table name for the GitRepo entity.
	// It exists in this package in order to avoid circular dependency with the "gitrepo" package.
	GitRepoInverseTable = "git_repos"
	// CreatorTable is the table that holds the creator relation/edge. The primary key declared below.
	CreatorTable = "user_projects"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldProjectName,
	FieldDescribe,
	FieldCreatedAt,
}

var (
	// GitRepoPrimaryKey and GitRepoColumn2 are the table columns denoting the
	// primary key for the git_repo relation (M2M).
	GitRepoPrimaryKey = []string{"git_repo_id", "project_id"}
	// CreatorPrimaryKey and CreatorColumn2 are the table columns denoting the
	// primary key for the creator relation (M2M).
	CreatorPrimaryKey = []string{"user_id", "project_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
