// Code generated by ent, DO NOT EDIT.

package deployrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sheason2019/spoved/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLTE(FieldID, id))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldImage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldStatusCode, v))
}

// ContainerHash applies equality check predicate on the "container_hash" field. It's identical to ContainerHashEQ.
func ContainerHash(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldContainerHash, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldContainsFold(FieldImage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldStatusCode, v))
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNEQ(FieldStatusCode, v))
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldIn(FieldStatusCode, vs...))
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNotIn(FieldStatusCode, vs...))
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGT(FieldStatusCode, v))
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGTE(FieldStatusCode, v))
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLT(FieldStatusCode, v))
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v int) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLTE(FieldStatusCode, v))
}

// ContainerHashEQ applies the EQ predicate on the "container_hash" field.
func ContainerHashEQ(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEQ(FieldContainerHash, v))
}

// ContainerHashNEQ applies the NEQ predicate on the "container_hash" field.
func ContainerHashNEQ(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNEQ(FieldContainerHash, v))
}

// ContainerHashIn applies the In predicate on the "container_hash" field.
func ContainerHashIn(vs ...string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldIn(FieldContainerHash, vs...))
}

// ContainerHashNotIn applies the NotIn predicate on the "container_hash" field.
func ContainerHashNotIn(vs ...string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldNotIn(FieldContainerHash, vs...))
}

// ContainerHashGT applies the GT predicate on the "container_hash" field.
func ContainerHashGT(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGT(FieldContainerHash, v))
}

// ContainerHashGTE applies the GTE predicate on the "container_hash" field.
func ContainerHashGTE(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldGTE(FieldContainerHash, v))
}

// ContainerHashLT applies the LT predicate on the "container_hash" field.
func ContainerHashLT(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLT(FieldContainerHash, v))
}

// ContainerHashLTE applies the LTE predicate on the "container_hash" field.
func ContainerHashLTE(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldLTE(FieldContainerHash, v))
}

// ContainerHashContains applies the Contains predicate on the "container_hash" field.
func ContainerHashContains(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldContains(FieldContainerHash, v))
}

// ContainerHashHasPrefix applies the HasPrefix predicate on the "container_hash" field.
func ContainerHashHasPrefix(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldHasPrefix(FieldContainerHash, v))
}

// ContainerHashHasSuffix applies the HasSuffix predicate on the "container_hash" field.
func ContainerHashHasSuffix(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldHasSuffix(FieldContainerHash, v))
}

// ContainerHashEqualFold applies the EqualFold predicate on the "container_hash" field.
func ContainerHashEqualFold(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldEqualFold(FieldContainerHash, v))
}

// ContainerHashContainsFold applies the ContainsFold predicate on the "container_hash" field.
func ContainerHashContainsFold(v string) predicate.DeployRecord {
	return predicate.DeployRecord(sql.FieldContainsFold(FieldContainerHash, v))
}

// HasOperator applies the HasEdge predicate on the "operator" edge.
func HasOperator() predicate.DeployRecord {
	return predicate.DeployRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OperatorTable, OperatorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatorWith applies the HasEdge predicate on the "operator" edge with a given conditions (other predicates).
func HasOperatorWith(preds ...predicate.User) predicate.DeployRecord {
	return predicate.DeployRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OperatorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OperatorTable, OperatorPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompileRecord applies the HasEdge predicate on the "compile_record" edge.
func HasCompileRecord() predicate.DeployRecord {
	return predicate.DeployRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CompileRecordTable, CompileRecordPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompileRecordWith applies the HasEdge predicate on the "compile_record" edge with a given conditions (other predicates).
func HasCompileRecordWith(preds ...predicate.CompileRecord) predicate.DeployRecord {
	return predicate.DeployRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompileRecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CompileRecordTable, CompileRecordPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeployRecord) predicate.DeployRecord {
	return predicate.DeployRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeployRecord) predicate.DeployRecord {
	return predicate.DeployRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeployRecord) predicate.DeployRecord {
	return predicate.DeployRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
