// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldPasswordSalt holds the string denoting the password_salt field in the database.
	FieldPasswordSalt = "password_salt"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeCompileRecords holds the string denoting the compile_records edge name in mutations.
	EdgeCompileRecords = "compile_records"
	// EdgeDeployRecords holds the string denoting the deploy_records edge name in mutations.
	EdgeDeployRecords = "deploy_records"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ProjectsTable is the table that holds the projects relation/edge. The primary key declared below.
	ProjectsTable = "user_projects"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "projects"
	// CompileRecordsTable is the table that holds the compile_records relation/edge. The primary key declared below.
	CompileRecordsTable = "user_compile_records"
	// CompileRecordsInverseTable is the table name for the CompileRecord entity.
	// It exists in this package in order to avoid circular dependency with the "compilerecord" package.
	CompileRecordsInverseTable = "compile_records"
	// DeployRecordsTable is the table that holds the deploy_records relation/edge. The primary key declared below.
	DeployRecordsTable = "user_deploy_records"
	// DeployRecordsInverseTable is the table name for the DeployRecord entity.
	// It exists in this package in order to avoid circular dependency with the "deployrecord" package.
	DeployRecordsInverseTable = "deploy_records"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPasswordHash,
	FieldPasswordSalt,
	FieldCreatedAt,
}

var (
	// ProjectsPrimaryKey and ProjectsColumn2 are the table columns denoting the
	// primary key for the projects relation (M2M).
	ProjectsPrimaryKey = []string{"user_id", "project_id"}
	// CompileRecordsPrimaryKey and CompileRecordsColumn2 are the table columns denoting the
	// primary key for the compile_records relation (M2M).
	CompileRecordsPrimaryKey = []string{"user_id", "compile_record_id"}
	// DeployRecordsPrimaryKey and DeployRecordsColumn2 are the table columns denoting the
	// primary key for the deploy_records relation (M2M).
	DeployRecordsPrimaryKey = []string{"user_id", "deploy_record_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
