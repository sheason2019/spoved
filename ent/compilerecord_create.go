// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sheason2019/spoved/ent/compilerecord"
	"github.com/sheason2019/spoved/ent/deployrecord"
	"github.com/sheason2019/spoved/ent/project"
	"github.com/sheason2019/spoved/ent/user"
)

// CompileRecordCreate is the builder for creating a CompileRecord entity.
type CompileRecordCreate struct {
	config
	mutation *CompileRecordMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (crc *CompileRecordCreate) SetVersion(s string) *CompileRecordCreate {
	crc.mutation.SetVersion(s)
	return crc
}

// SetImage sets the "image" field.
func (crc *CompileRecordCreate) SetImage(s string) *CompileRecordCreate {
	crc.mutation.SetImage(s)
	return crc
}

// SetCreatedAt sets the "created_at" field.
func (crc *CompileRecordCreate) SetCreatedAt(t time.Time) *CompileRecordCreate {
	crc.mutation.SetCreatedAt(t)
	return crc
}

// SetStatusCode sets the "status_code" field.
func (crc *CompileRecordCreate) SetStatusCode(i int) *CompileRecordCreate {
	crc.mutation.SetStatusCode(i)
	return crc
}

// SetOutput sets the "output" field.
func (crc *CompileRecordCreate) SetOutput(s string) *CompileRecordCreate {
	crc.mutation.SetOutput(s)
	return crc
}

// SetBranch sets the "branch" field.
func (crc *CompileRecordCreate) SetBranch(s string) *CompileRecordCreate {
	crc.mutation.SetBranch(s)
	return crc
}

// AddOperatorIDs adds the "operator" edge to the User entity by IDs.
func (crc *CompileRecordCreate) AddOperatorIDs(ids ...int) *CompileRecordCreate {
	crc.mutation.AddOperatorIDs(ids...)
	return crc
}

// AddOperator adds the "operator" edges to the User entity.
func (crc *CompileRecordCreate) AddOperator(u ...*User) *CompileRecordCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return crc.AddOperatorIDs(ids...)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (crc *CompileRecordCreate) AddProjectIDs(ids ...int) *CompileRecordCreate {
	crc.mutation.AddProjectIDs(ids...)
	return crc
}

// AddProject adds the "project" edges to the Project entity.
func (crc *CompileRecordCreate) AddProject(p ...*Project) *CompileRecordCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return crc.AddProjectIDs(ids...)
}

// AddDeployRecordIDs adds the "deploy_records" edge to the DeployRecord entity by IDs.
func (crc *CompileRecordCreate) AddDeployRecordIDs(ids ...int) *CompileRecordCreate {
	crc.mutation.AddDeployRecordIDs(ids...)
	return crc
}

// AddDeployRecords adds the "deploy_records" edges to the DeployRecord entity.
func (crc *CompileRecordCreate) AddDeployRecords(d ...*DeployRecord) *CompileRecordCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return crc.AddDeployRecordIDs(ids...)
}

// Mutation returns the CompileRecordMutation object of the builder.
func (crc *CompileRecordCreate) Mutation() *CompileRecordMutation {
	return crc.mutation
}

// Save creates the CompileRecord in the database.
func (crc *CompileRecordCreate) Save(ctx context.Context) (*CompileRecord, error) {
	return withHooks[*CompileRecord, CompileRecordMutation](ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CompileRecordCreate) SaveX(ctx context.Context) *CompileRecord {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CompileRecordCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CompileRecordCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CompileRecordCreate) check() error {
	if _, ok := crc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CompileRecord.version"`)}
	}
	if _, ok := crc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "CompileRecord.image"`)}
	}
	if _, ok := crc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CompileRecord.created_at"`)}
	}
	if _, ok := crc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`ent: missing required field "CompileRecord.status_code"`)}
	}
	if _, ok := crc.mutation.Output(); !ok {
		return &ValidationError{Name: "output", err: errors.New(`ent: missing required field "CompileRecord.output"`)}
	}
	if _, ok := crc.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required field "CompileRecord.branch"`)}
	}
	return nil
}

func (crc *CompileRecordCreate) sqlSave(ctx context.Context) (*CompileRecord, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CompileRecordCreate) createSpec() (*CompileRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &CompileRecord{config: crc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: compilerecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: compilerecord.FieldID,
			},
		}
	)
	if value, ok := crc.mutation.Version(); ok {
		_spec.SetField(compilerecord.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := crc.mutation.Image(); ok {
		_spec.SetField(compilerecord.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := crc.mutation.CreatedAt(); ok {
		_spec.SetField(compilerecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crc.mutation.StatusCode(); ok {
		_spec.SetField(compilerecord.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := crc.mutation.Output(); ok {
		_spec.SetField(compilerecord.FieldOutput, field.TypeString, value)
		_node.Output = value
	}
	if value, ok := crc.mutation.Branch(); ok {
		_spec.SetField(compilerecord.FieldBranch, field.TypeString, value)
		_node.Branch = value
	}
	if nodes := crc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.OperatorTable,
			Columns: compilerecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   compilerecord.ProjectTable,
			Columns: compilerecord.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crc.mutation.DeployRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   compilerecord.DeployRecordsTable,
			Columns: compilerecord.DeployRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompileRecordCreateBulk is the builder for creating many CompileRecord entities in bulk.
type CompileRecordCreateBulk struct {
	config
	builders []*CompileRecordCreate
}

// Save creates the CompileRecord entities in the database.
func (crcb *CompileRecordCreateBulk) Save(ctx context.Context) ([]*CompileRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CompileRecord, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompileRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CompileRecordCreateBulk) SaveX(ctx context.Context) []*CompileRecord {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CompileRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CompileRecordCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}
