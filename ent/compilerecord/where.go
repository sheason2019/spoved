// Code generated by ent, DO NOT EDIT.

package compilerecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sheason2019/spoved/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLTE(FieldID, id))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldVersion, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldImage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldStatusCode, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldOutput, v))
}

// Branch applies equality check predicate on the "branch" field. It's identical to BranchEQ.
func Branch(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldBranch, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldContainsFold(FieldVersion, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldContainsFold(FieldImage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldStatusCode, v))
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNEQ(FieldStatusCode, v))
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldIn(FieldStatusCode, vs...))
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNotIn(FieldStatusCode, vs...))
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGT(FieldStatusCode, v))
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGTE(FieldStatusCode, v))
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLT(FieldStatusCode, v))
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v int) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLTE(FieldStatusCode, v))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLTE(FieldOutput, v))
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldContains(FieldOutput, v))
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldHasPrefix(FieldOutput, v))
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldHasSuffix(FieldOutput, v))
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEqualFold(FieldOutput, v))
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldContainsFold(FieldOutput, v))
}

// BranchEQ applies the EQ predicate on the "branch" field.
func BranchEQ(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEQ(FieldBranch, v))
}

// BranchNEQ applies the NEQ predicate on the "branch" field.
func BranchNEQ(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNEQ(FieldBranch, v))
}

// BranchIn applies the In predicate on the "branch" field.
func BranchIn(vs ...string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldIn(FieldBranch, vs...))
}

// BranchNotIn applies the NotIn predicate on the "branch" field.
func BranchNotIn(vs ...string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldNotIn(FieldBranch, vs...))
}

// BranchGT applies the GT predicate on the "branch" field.
func BranchGT(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGT(FieldBranch, v))
}

// BranchGTE applies the GTE predicate on the "branch" field.
func BranchGTE(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldGTE(FieldBranch, v))
}

// BranchLT applies the LT predicate on the "branch" field.
func BranchLT(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLT(FieldBranch, v))
}

// BranchLTE applies the LTE predicate on the "branch" field.
func BranchLTE(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldLTE(FieldBranch, v))
}

// BranchContains applies the Contains predicate on the "branch" field.
func BranchContains(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldContains(FieldBranch, v))
}

// BranchHasPrefix applies the HasPrefix predicate on the "branch" field.
func BranchHasPrefix(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldHasPrefix(FieldBranch, v))
}

// BranchHasSuffix applies the HasSuffix predicate on the "branch" field.
func BranchHasSuffix(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldHasSuffix(FieldBranch, v))
}

// BranchEqualFold applies the EqualFold predicate on the "branch" field.
func BranchEqualFold(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldEqualFold(FieldBranch, v))
}

// BranchContainsFold applies the ContainsFold predicate on the "branch" field.
func BranchContainsFold(v string) predicate.CompileRecord {
	return predicate.CompileRecord(sql.FieldContainsFold(FieldBranch, v))
}

// HasOperator applies the HasEdge predicate on the "operator" edge.
func HasOperator() predicate.CompileRecord {
	return predicate.CompileRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OperatorTable, OperatorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatorWith applies the HasEdge predicate on the "operator" edge with a given conditions (other predicates).
func HasOperatorWith(preds ...predicate.User) predicate.CompileRecord {
	return predicate.CompileRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OperatorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OperatorTable, OperatorPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.CompileRecord {
	return predicate.CompileRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProjectTable, ProjectPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.CompileRecord {
	return predicate.CompileRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProjectTable, ProjectPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompileRecord) predicate.CompileRecord {
	return predicate.CompileRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompileRecord) predicate.CompileRecord {
	return predicate.CompileRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompileRecord) predicate.CompileRecord {
	return predicate.CompileRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
