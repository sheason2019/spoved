// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sheason2019/spoved/ent/compilerecord"
	"github.com/sheason2019/spoved/ent/deployrecord"
	"github.com/sheason2019/spoved/ent/predicate"
	"github.com/sheason2019/spoved/ent/user"
)

// DeployRecordUpdate is the builder for updating DeployRecord entities.
type DeployRecordUpdate struct {
	config
	hooks    []Hook
	mutation *DeployRecordMutation
}

// Where appends a list predicates to the DeployRecordUpdate builder.
func (dru *DeployRecordUpdate) Where(ps ...predicate.DeployRecord) *DeployRecordUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetImage sets the "image" field.
func (dru *DeployRecordUpdate) SetImage(s string) *DeployRecordUpdate {
	dru.mutation.SetImage(s)
	return dru
}

// SetCreatedAt sets the "created_at" field.
func (dru *DeployRecordUpdate) SetCreatedAt(t time.Time) *DeployRecordUpdate {
	dru.mutation.SetCreatedAt(t)
	return dru
}

// SetStatusCode sets the "status_code" field.
func (dru *DeployRecordUpdate) SetStatusCode(i int) *DeployRecordUpdate {
	dru.mutation.ResetStatusCode()
	dru.mutation.SetStatusCode(i)
	return dru
}

// AddStatusCode adds i to the "status_code" field.
func (dru *DeployRecordUpdate) AddStatusCode(i int) *DeployRecordUpdate {
	dru.mutation.AddStatusCode(i)
	return dru
}

// SetContainerHash sets the "container_hash" field.
func (dru *DeployRecordUpdate) SetContainerHash(s string) *DeployRecordUpdate {
	dru.mutation.SetContainerHash(s)
	return dru
}

// AddOperatorIDs adds the "operator" edge to the User entity by IDs.
func (dru *DeployRecordUpdate) AddOperatorIDs(ids ...int) *DeployRecordUpdate {
	dru.mutation.AddOperatorIDs(ids...)
	return dru
}

// AddOperator adds the "operator" edges to the User entity.
func (dru *DeployRecordUpdate) AddOperator(u ...*User) *DeployRecordUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dru.AddOperatorIDs(ids...)
}

// AddCompileRecordIDs adds the "compile_record" edge to the CompileRecord entity by IDs.
func (dru *DeployRecordUpdate) AddCompileRecordIDs(ids ...int) *DeployRecordUpdate {
	dru.mutation.AddCompileRecordIDs(ids...)
	return dru
}

// AddCompileRecord adds the "compile_record" edges to the CompileRecord entity.
func (dru *DeployRecordUpdate) AddCompileRecord(c ...*CompileRecord) *DeployRecordUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dru.AddCompileRecordIDs(ids...)
}

// Mutation returns the DeployRecordMutation object of the builder.
func (dru *DeployRecordUpdate) Mutation() *DeployRecordMutation {
	return dru.mutation
}

// ClearOperator clears all "operator" edges to the User entity.
func (dru *DeployRecordUpdate) ClearOperator() *DeployRecordUpdate {
	dru.mutation.ClearOperator()
	return dru
}

// RemoveOperatorIDs removes the "operator" edge to User entities by IDs.
func (dru *DeployRecordUpdate) RemoveOperatorIDs(ids ...int) *DeployRecordUpdate {
	dru.mutation.RemoveOperatorIDs(ids...)
	return dru
}

// RemoveOperator removes "operator" edges to User entities.
func (dru *DeployRecordUpdate) RemoveOperator(u ...*User) *DeployRecordUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dru.RemoveOperatorIDs(ids...)
}

// ClearCompileRecord clears all "compile_record" edges to the CompileRecord entity.
func (dru *DeployRecordUpdate) ClearCompileRecord() *DeployRecordUpdate {
	dru.mutation.ClearCompileRecord()
	return dru
}

// RemoveCompileRecordIDs removes the "compile_record" edge to CompileRecord entities by IDs.
func (dru *DeployRecordUpdate) RemoveCompileRecordIDs(ids ...int) *DeployRecordUpdate {
	dru.mutation.RemoveCompileRecordIDs(ids...)
	return dru
}

// RemoveCompileRecord removes "compile_record" edges to CompileRecord entities.
func (dru *DeployRecordUpdate) RemoveCompileRecord(c ...*CompileRecord) *DeployRecordUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dru.RemoveCompileRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DeployRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DeployRecordMutation](ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DeployRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DeployRecordUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DeployRecordUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DeployRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployrecord.Table,
			Columns: deployrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deployrecord.FieldID,
			},
		},
	}
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.Image(); ok {
		_spec.SetField(deployrecord.FieldImage, field.TypeString, value)
	}
	if value, ok := dru.mutation.CreatedAt(); ok {
		_spec.SetField(deployrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dru.mutation.StatusCode(); ok {
		_spec.SetField(deployrecord.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedStatusCode(); ok {
		_spec.AddField(deployrecord.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := dru.mutation.ContainerHash(); ok {
		_spec.SetField(deployrecord.FieldContainerHash, field.TypeString, value)
	}
	if dru.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.OperatorTable,
			Columns: deployrecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RemovedOperatorIDs(); len(nodes) > 0 && !dru.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.OperatorTable,
			Columns: deployrecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.OperatorTable,
			Columns: deployrecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.CompileRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.CompileRecordTable,
			Columns: deployrecord.CompileRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RemovedCompileRecordIDs(); len(nodes) > 0 && !dru.mutation.CompileRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.CompileRecordTable,
			Columns: deployrecord.CompileRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.CompileRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.CompileRecordTable,
			Columns: deployrecord.CompileRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DeployRecordUpdateOne is the builder for updating a single DeployRecord entity.
type DeployRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeployRecordMutation
}

// SetImage sets the "image" field.
func (druo *DeployRecordUpdateOne) SetImage(s string) *DeployRecordUpdateOne {
	druo.mutation.SetImage(s)
	return druo
}

// SetCreatedAt sets the "created_at" field.
func (druo *DeployRecordUpdateOne) SetCreatedAt(t time.Time) *DeployRecordUpdateOne {
	druo.mutation.SetCreatedAt(t)
	return druo
}

// SetStatusCode sets the "status_code" field.
func (druo *DeployRecordUpdateOne) SetStatusCode(i int) *DeployRecordUpdateOne {
	druo.mutation.ResetStatusCode()
	druo.mutation.SetStatusCode(i)
	return druo
}

// AddStatusCode adds i to the "status_code" field.
func (druo *DeployRecordUpdateOne) AddStatusCode(i int) *DeployRecordUpdateOne {
	druo.mutation.AddStatusCode(i)
	return druo
}

// SetContainerHash sets the "container_hash" field.
func (druo *DeployRecordUpdateOne) SetContainerHash(s string) *DeployRecordUpdateOne {
	druo.mutation.SetContainerHash(s)
	return druo
}

// AddOperatorIDs adds the "operator" edge to the User entity by IDs.
func (druo *DeployRecordUpdateOne) AddOperatorIDs(ids ...int) *DeployRecordUpdateOne {
	druo.mutation.AddOperatorIDs(ids...)
	return druo
}

// AddOperator adds the "operator" edges to the User entity.
func (druo *DeployRecordUpdateOne) AddOperator(u ...*User) *DeployRecordUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return druo.AddOperatorIDs(ids...)
}

// AddCompileRecordIDs adds the "compile_record" edge to the CompileRecord entity by IDs.
func (druo *DeployRecordUpdateOne) AddCompileRecordIDs(ids ...int) *DeployRecordUpdateOne {
	druo.mutation.AddCompileRecordIDs(ids...)
	return druo
}

// AddCompileRecord adds the "compile_record" edges to the CompileRecord entity.
func (druo *DeployRecordUpdateOne) AddCompileRecord(c ...*CompileRecord) *DeployRecordUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return druo.AddCompileRecordIDs(ids...)
}

// Mutation returns the DeployRecordMutation object of the builder.
func (druo *DeployRecordUpdateOne) Mutation() *DeployRecordMutation {
	return druo.mutation
}

// ClearOperator clears all "operator" edges to the User entity.
func (druo *DeployRecordUpdateOne) ClearOperator() *DeployRecordUpdateOne {
	druo.mutation.ClearOperator()
	return druo
}

// RemoveOperatorIDs removes the "operator" edge to User entities by IDs.
func (druo *DeployRecordUpdateOne) RemoveOperatorIDs(ids ...int) *DeployRecordUpdateOne {
	druo.mutation.RemoveOperatorIDs(ids...)
	return druo
}

// RemoveOperator removes "operator" edges to User entities.
func (druo *DeployRecordUpdateOne) RemoveOperator(u ...*User) *DeployRecordUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return druo.RemoveOperatorIDs(ids...)
}

// ClearCompileRecord clears all "compile_record" edges to the CompileRecord entity.
func (druo *DeployRecordUpdateOne) ClearCompileRecord() *DeployRecordUpdateOne {
	druo.mutation.ClearCompileRecord()
	return druo
}

// RemoveCompileRecordIDs removes the "compile_record" edge to CompileRecord entities by IDs.
func (druo *DeployRecordUpdateOne) RemoveCompileRecordIDs(ids ...int) *DeployRecordUpdateOne {
	druo.mutation.RemoveCompileRecordIDs(ids...)
	return druo
}

// RemoveCompileRecord removes "compile_record" edges to CompileRecord entities.
func (druo *DeployRecordUpdateOne) RemoveCompileRecord(c ...*CompileRecord) *DeployRecordUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return druo.RemoveCompileRecordIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DeployRecordUpdateOne) Select(field string, fields ...string) *DeployRecordUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DeployRecord entity.
func (druo *DeployRecordUpdateOne) Save(ctx context.Context) (*DeployRecord, error) {
	return withHooks[*DeployRecord, DeployRecordMutation](ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DeployRecordUpdateOne) SaveX(ctx context.Context) *DeployRecord {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DeployRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DeployRecordUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DeployRecordUpdateOne) sqlSave(ctx context.Context) (_node *DeployRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployrecord.Table,
			Columns: deployrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deployrecord.FieldID,
			},
		},
	}
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeployRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deployrecord.FieldID)
		for _, f := range fields {
			if !deployrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deployrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.Image(); ok {
		_spec.SetField(deployrecord.FieldImage, field.TypeString, value)
	}
	if value, ok := druo.mutation.CreatedAt(); ok {
		_spec.SetField(deployrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := druo.mutation.StatusCode(); ok {
		_spec.SetField(deployrecord.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedStatusCode(); ok {
		_spec.AddField(deployrecord.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := druo.mutation.ContainerHash(); ok {
		_spec.SetField(deployrecord.FieldContainerHash, field.TypeString, value)
	}
	if druo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.OperatorTable,
			Columns: deployrecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RemovedOperatorIDs(); len(nodes) > 0 && !druo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.OperatorTable,
			Columns: deployrecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.OperatorTable,
			Columns: deployrecord.OperatorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.CompileRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.CompileRecordTable,
			Columns: deployrecord.CompileRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RemovedCompileRecordIDs(); len(nodes) > 0 && !druo.mutation.CompileRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.CompileRecordTable,
			Columns: deployrecord.CompileRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.CompileRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deployrecord.CompileRecordTable,
			Columns: deployrecord.CompileRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: compilerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeployRecord{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
