// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sheason2019/spoved/ent/gitrepo"
	"github.com/sheason2019/spoved/ent/project"
)

// GitRepoCreate is the builder for creating a GitRepo entity.
type GitRepoCreate struct {
	config
	mutation *GitRepoMutation
	hooks    []Hook
}

// SetGitURL sets the "git_url" field.
func (grc *GitRepoCreate) SetGitURL(s string) *GitRepoCreate {
	grc.mutation.SetGitURL(s)
	return grc
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (grc *GitRepoCreate) AddProjectIDs(ids ...int) *GitRepoCreate {
	grc.mutation.AddProjectIDs(ids...)
	return grc
}

// AddProjects adds the "projects" edges to the Project entity.
func (grc *GitRepoCreate) AddProjects(p ...*Project) *GitRepoCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return grc.AddProjectIDs(ids...)
}

// Mutation returns the GitRepoMutation object of the builder.
func (grc *GitRepoCreate) Mutation() *GitRepoMutation {
	return grc.mutation
}

// Save creates the GitRepo in the database.
func (grc *GitRepoCreate) Save(ctx context.Context) (*GitRepo, error) {
	return withHooks[*GitRepo, GitRepoMutation](ctx, grc.sqlSave, grc.mutation, grc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GitRepoCreate) SaveX(ctx context.Context) *GitRepo {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GitRepoCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GitRepoCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grc *GitRepoCreate) check() error {
	if _, ok := grc.mutation.GitURL(); !ok {
		return &ValidationError{Name: "git_url", err: errors.New(`ent: missing required field "GitRepo.git_url"`)}
	}
	return nil
}

func (grc *GitRepoCreate) sqlSave(ctx context.Context) (*GitRepo, error) {
	if err := grc.check(); err != nil {
		return nil, err
	}
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	grc.mutation.id = &_node.ID
	grc.mutation.done = true
	return _node, nil
}

func (grc *GitRepoCreate) createSpec() (*GitRepo, *sqlgraph.CreateSpec) {
	var (
		_node = &GitRepo{config: grc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gitrepo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gitrepo.FieldID,
			},
		}
	)
	if value, ok := grc.mutation.GitURL(); ok {
		_spec.SetField(gitrepo.FieldGitURL, field.TypeString, value)
		_node.GitURL = value
	}
	if nodes := grc.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gitrepo.ProjectsTable,
			Columns: gitrepo.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GitRepoCreateBulk is the builder for creating many GitRepo entities in bulk.
type GitRepoCreateBulk struct {
	config
	builders []*GitRepoCreate
}

// Save creates the GitRepo entities in the database.
func (grcb *GitRepoCreateBulk) Save(ctx context.Context) ([]*GitRepo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GitRepo, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GitRepoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GitRepoCreateBulk) SaveX(ctx context.Context) []*GitRepo {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GitRepoCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GitRepoCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}
