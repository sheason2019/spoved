// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sheason2019/spoved/ent/gitrepo"
	"github.com/sheason2019/spoved/ent/predicate"
	"github.com/sheason2019/spoved/ent/project"
)

// GitRepoUpdate is the builder for updating GitRepo entities.
type GitRepoUpdate struct {
	config
	hooks    []Hook
	mutation *GitRepoMutation
}

// Where appends a list predicates to the GitRepoUpdate builder.
func (gru *GitRepoUpdate) Where(ps ...predicate.GitRepo) *GitRepoUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetGitURL sets the "git_url" field.
func (gru *GitRepoUpdate) SetGitURL(s string) *GitRepoUpdate {
	gru.mutation.SetGitURL(s)
	return gru
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (gru *GitRepoUpdate) AddProjectIDs(ids ...int) *GitRepoUpdate {
	gru.mutation.AddProjectIDs(ids...)
	return gru
}

// AddProjects adds the "projects" edges to the Project entity.
func (gru *GitRepoUpdate) AddProjects(p ...*Project) *GitRepoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gru.AddProjectIDs(ids...)
}

// Mutation returns the GitRepoMutation object of the builder.
func (gru *GitRepoUpdate) Mutation() *GitRepoMutation {
	return gru.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (gru *GitRepoUpdate) ClearProjects() *GitRepoUpdate {
	gru.mutation.ClearProjects()
	return gru
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (gru *GitRepoUpdate) RemoveProjectIDs(ids ...int) *GitRepoUpdate {
	gru.mutation.RemoveProjectIDs(ids...)
	return gru
}

// RemoveProjects removes "projects" edges to Project entities.
func (gru *GitRepoUpdate) RemoveProjects(p ...*Project) *GitRepoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gru.RemoveProjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GitRepoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GitRepoMutation](ctx, gru.sqlSave, gru.mutation, gru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GitRepoUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GitRepoUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GitRepoUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gru *GitRepoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gitrepo.Table,
			Columns: gitrepo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gitrepo.FieldID,
			},
		},
	}
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.GitURL(); ok {
		_spec.SetField(gitrepo.FieldGitURL, field.TypeString, value)
	}
	if gru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gitrepo.ProjectsTable,
			Columns: gitrepo.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !gru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gitrepo.ProjectsTable,
			Columns: gitrepo.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gitrepo.ProjectsTable,
			Columns: gitrepo.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gitrepo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gru.mutation.done = true
	return n, nil
}

// GitRepoUpdateOne is the builder for updating a single GitRepo entity.
type GitRepoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GitRepoMutation
}

// SetGitURL sets the "git_url" field.
func (gruo *GitRepoUpdateOne) SetGitURL(s string) *GitRepoUpdateOne {
	gruo.mutation.SetGitURL(s)
	return gruo
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (gruo *GitRepoUpdateOne) AddProjectIDs(ids ...int) *GitRepoUpdateOne {
	gruo.mutation.AddProjectIDs(ids...)
	return gruo
}

// AddProjects adds the "projects" edges to the Project entity.
func (gruo *GitRepoUpdateOne) AddProjects(p ...*Project) *GitRepoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gruo.AddProjectIDs(ids...)
}

// Mutation returns the GitRepoMutation object of the builder.
func (gruo *GitRepoUpdateOne) Mutation() *GitRepoMutation {
	return gruo.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (gruo *GitRepoUpdateOne) ClearProjects() *GitRepoUpdateOne {
	gruo.mutation.ClearProjects()
	return gruo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (gruo *GitRepoUpdateOne) RemoveProjectIDs(ids ...int) *GitRepoUpdateOne {
	gruo.mutation.RemoveProjectIDs(ids...)
	return gruo
}

// RemoveProjects removes "projects" edges to Project entities.
func (gruo *GitRepoUpdateOne) RemoveProjects(p ...*Project) *GitRepoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gruo.RemoveProjectIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GitRepoUpdateOne) Select(field string, fields ...string) *GitRepoUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GitRepo entity.
func (gruo *GitRepoUpdateOne) Save(ctx context.Context) (*GitRepo, error) {
	return withHooks[*GitRepo, GitRepoMutation](ctx, gruo.sqlSave, gruo.mutation, gruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GitRepoUpdateOne) SaveX(ctx context.Context) *GitRepo {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GitRepoUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GitRepoUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gruo *GitRepoUpdateOne) sqlSave(ctx context.Context) (_node *GitRepo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gitrepo.Table,
			Columns: gitrepo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gitrepo.FieldID,
			},
		},
	}
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GitRepo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gitrepo.FieldID)
		for _, f := range fields {
			if !gitrepo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gitrepo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gruo.mutation.GitURL(); ok {
		_spec.SetField(gitrepo.FieldGitURL, field.TypeString, value)
	}
	if gruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gitrepo.ProjectsTable,
			Columns: gitrepo.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !gruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gitrepo.ProjectsTable,
			Columns: gitrepo.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gitrepo.ProjectsTable,
			Columns: gitrepo.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GitRepo{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gitrepo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gruo.mutation.done = true
	return _node, nil
}
