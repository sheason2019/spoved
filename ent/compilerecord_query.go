// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sheason2019/spoved/ent/compilerecord"
	"github.com/sheason2019/spoved/ent/predicate"
	"github.com/sheason2019/spoved/ent/project"
	"github.com/sheason2019/spoved/ent/user"
)

// CompileRecordQuery is the builder for querying CompileRecord entities.
type CompileRecordQuery struct {
	config
	ctx          *QueryContext
	order        []OrderFunc
	inters       []Interceptor
	predicates   []predicate.CompileRecord
	withOperator *UserQuery
	withProject  *ProjectQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompileRecordQuery builder.
func (crq *CompileRecordQuery) Where(ps ...predicate.CompileRecord) *CompileRecordQuery {
	crq.predicates = append(crq.predicates, ps...)
	return crq
}

// Limit the number of records to be returned by this query.
func (crq *CompileRecordQuery) Limit(limit int) *CompileRecordQuery {
	crq.ctx.Limit = &limit
	return crq
}

// Offset to start from.
func (crq *CompileRecordQuery) Offset(offset int) *CompileRecordQuery {
	crq.ctx.Offset = &offset
	return crq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (crq *CompileRecordQuery) Unique(unique bool) *CompileRecordQuery {
	crq.ctx.Unique = &unique
	return crq
}

// Order specifies how the records should be ordered.
func (crq *CompileRecordQuery) Order(o ...OrderFunc) *CompileRecordQuery {
	crq.order = append(crq.order, o...)
	return crq
}

// QueryOperator chains the current query on the "operator" edge.
func (crq *CompileRecordQuery) QueryOperator() *UserQuery {
	query := (&UserClient{config: crq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(compilerecord.Table, compilerecord.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, compilerecord.OperatorTable, compilerecord.OperatorPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (crq *CompileRecordQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: crq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(compilerecord.Table, compilerecord.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, compilerecord.ProjectTable, compilerecord.ProjectPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CompileRecord entity from the query.
// Returns a *NotFoundError when no CompileRecord was found.
func (crq *CompileRecordQuery) First(ctx context.Context) (*CompileRecord, error) {
	nodes, err := crq.Limit(1).All(setContextOp(ctx, crq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{compilerecord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (crq *CompileRecordQuery) FirstX(ctx context.Context) *CompileRecord {
	node, err := crq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CompileRecord ID from the query.
// Returns a *NotFoundError when no CompileRecord ID was found.
func (crq *CompileRecordQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crq.Limit(1).IDs(setContextOp(ctx, crq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{compilerecord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (crq *CompileRecordQuery) FirstIDX(ctx context.Context) int {
	id, err := crq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CompileRecord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CompileRecord entity is found.
// Returns a *NotFoundError when no CompileRecord entities are found.
func (crq *CompileRecordQuery) Only(ctx context.Context) (*CompileRecord, error) {
	nodes, err := crq.Limit(2).All(setContextOp(ctx, crq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{compilerecord.Label}
	default:
		return nil, &NotSingularError{compilerecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (crq *CompileRecordQuery) OnlyX(ctx context.Context) *CompileRecord {
	node, err := crq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CompileRecord ID in the query.
// Returns a *NotSingularError when more than one CompileRecord ID is found.
// Returns a *NotFoundError when no entities are found.
func (crq *CompileRecordQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crq.Limit(2).IDs(setContextOp(ctx, crq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{compilerecord.Label}
	default:
		err = &NotSingularError{compilerecord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (crq *CompileRecordQuery) OnlyIDX(ctx context.Context) int {
	id, err := crq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CompileRecords.
func (crq *CompileRecordQuery) All(ctx context.Context) ([]*CompileRecord, error) {
	ctx = setContextOp(ctx, crq.ctx, "All")
	if err := crq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CompileRecord, *CompileRecordQuery]()
	return withInterceptors[[]*CompileRecord](ctx, crq, qr, crq.inters)
}

// AllX is like All, but panics if an error occurs.
func (crq *CompileRecordQuery) AllX(ctx context.Context) []*CompileRecord {
	nodes, err := crq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CompileRecord IDs.
func (crq *CompileRecordQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, crq.ctx, "IDs")
	if err := crq.Select(compilerecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (crq *CompileRecordQuery) IDsX(ctx context.Context) []int {
	ids, err := crq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (crq *CompileRecordQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, crq.ctx, "Count")
	if err := crq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, crq, querierCount[*CompileRecordQuery](), crq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (crq *CompileRecordQuery) CountX(ctx context.Context) int {
	count, err := crq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (crq *CompileRecordQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, crq.ctx, "Exist")
	switch _, err := crq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (crq *CompileRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := crq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompileRecordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (crq *CompileRecordQuery) Clone() *CompileRecordQuery {
	if crq == nil {
		return nil
	}
	return &CompileRecordQuery{
		config:       crq.config,
		ctx:          crq.ctx.Clone(),
		order:        append([]OrderFunc{}, crq.order...),
		inters:       append([]Interceptor{}, crq.inters...),
		predicates:   append([]predicate.CompileRecord{}, crq.predicates...),
		withOperator: crq.withOperator.Clone(),
		withProject:  crq.withProject.Clone(),
		// clone intermediate query.
		sql:  crq.sql.Clone(),
		path: crq.path,
	}
}

// WithOperator tells the query-builder to eager-load the nodes that are connected to
// the "operator" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *CompileRecordQuery) WithOperator(opts ...func(*UserQuery)) *CompileRecordQuery {
	query := (&UserClient{config: crq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crq.withOperator = query
	return crq
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *CompileRecordQuery) WithProject(opts ...func(*ProjectQuery)) *CompileRecordQuery {
	query := (&ProjectClient{config: crq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crq.withProject = query
	return crq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Version string `json:"version,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CompileRecord.Query().
//		GroupBy(compilerecord.FieldVersion).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (crq *CompileRecordQuery) GroupBy(field string, fields ...string) *CompileRecordGroupBy {
	crq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CompileRecordGroupBy{build: crq}
	grbuild.flds = &crq.ctx.Fields
	grbuild.label = compilerecord.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Version string `json:"version,omitempty"`
//	}
//
//	client.CompileRecord.Query().
//		Select(compilerecord.FieldVersion).
//		Scan(ctx, &v)
func (crq *CompileRecordQuery) Select(fields ...string) *CompileRecordSelect {
	crq.ctx.Fields = append(crq.ctx.Fields, fields...)
	sbuild := &CompileRecordSelect{CompileRecordQuery: crq}
	sbuild.label = compilerecord.Label
	sbuild.flds, sbuild.scan = &crq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CompileRecordSelect configured with the given aggregations.
func (crq *CompileRecordQuery) Aggregate(fns ...AggregateFunc) *CompileRecordSelect {
	return crq.Select().Aggregate(fns...)
}

func (crq *CompileRecordQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range crq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, crq); err != nil {
				return err
			}
		}
	}
	for _, f := range crq.ctx.Fields {
		if !compilerecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if crq.path != nil {
		prev, err := crq.path(ctx)
		if err != nil {
			return err
		}
		crq.sql = prev
	}
	return nil
}

func (crq *CompileRecordQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CompileRecord, error) {
	var (
		nodes       = []*CompileRecord{}
		_spec       = crq.querySpec()
		loadedTypes = [2]bool{
			crq.withOperator != nil,
			crq.withProject != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CompileRecord).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CompileRecord{config: crq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, crq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := crq.withOperator; query != nil {
		if err := crq.loadOperator(ctx, query, nodes,
			func(n *CompileRecord) { n.Edges.Operator = []*User{} },
			func(n *CompileRecord, e *User) { n.Edges.Operator = append(n.Edges.Operator, e) }); err != nil {
			return nil, err
		}
	}
	if query := crq.withProject; query != nil {
		if err := crq.loadProject(ctx, query, nodes,
			func(n *CompileRecord) { n.Edges.Project = []*Project{} },
			func(n *CompileRecord, e *Project) { n.Edges.Project = append(n.Edges.Project, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (crq *CompileRecordQuery) loadOperator(ctx context.Context, query *UserQuery, nodes []*CompileRecord, init func(*CompileRecord), assign func(*CompileRecord, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CompileRecord)
	nids := make(map[int]map[*CompileRecord]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(compilerecord.OperatorTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(compilerecord.OperatorPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(compilerecord.OperatorPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(compilerecord.OperatorPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*CompileRecord]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "operator" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (crq *CompileRecordQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*CompileRecord, init func(*CompileRecord), assign func(*CompileRecord, *Project)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CompileRecord)
	nids := make(map[int]map[*CompileRecord]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(compilerecord.ProjectTable)
		s.Join(joinT).On(s.C(project.FieldID), joinT.C(compilerecord.ProjectPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(compilerecord.ProjectPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(compilerecord.ProjectPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*CompileRecord]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "project" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (crq *CompileRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := crq.querySpec()
	_spec.Node.Columns = crq.ctx.Fields
	if len(crq.ctx.Fields) > 0 {
		_spec.Unique = crq.ctx.Unique != nil && *crq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, crq.driver, _spec)
}

func (crq *CompileRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   compilerecord.Table,
			Columns: compilerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: compilerecord.FieldID,
			},
		},
		From:   crq.sql,
		Unique: true,
	}
	if unique := crq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := crq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, compilerecord.FieldID)
		for i := range fields {
			if fields[i] != compilerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := crq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := crq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := crq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := crq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (crq *CompileRecordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(crq.driver.Dialect())
	t1 := builder.Table(compilerecord.Table)
	columns := crq.ctx.Fields
	if len(columns) == 0 {
		columns = compilerecord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if crq.sql != nil {
		selector = crq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if crq.ctx.Unique != nil && *crq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range crq.predicates {
		p(selector)
	}
	for _, p := range crq.order {
		p(selector)
	}
	if offset := crq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := crq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CompileRecordGroupBy is the group-by builder for CompileRecord entities.
type CompileRecordGroupBy struct {
	selector
	build *CompileRecordQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (crgb *CompileRecordGroupBy) Aggregate(fns ...AggregateFunc) *CompileRecordGroupBy {
	crgb.fns = append(crgb.fns, fns...)
	return crgb
}

// Scan applies the selector query and scans the result into the given value.
func (crgb *CompileRecordGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crgb.build.ctx, "GroupBy")
	if err := crgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompileRecordQuery, *CompileRecordGroupBy](ctx, crgb.build, crgb, crgb.build.inters, v)
}

func (crgb *CompileRecordGroupBy) sqlScan(ctx context.Context, root *CompileRecordQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(crgb.fns))
	for _, fn := range crgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*crgb.flds)+len(crgb.fns))
		for _, f := range *crgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*crgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CompileRecordSelect is the builder for selecting fields of CompileRecord entities.
type CompileRecordSelect struct {
	*CompileRecordQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (crs *CompileRecordSelect) Aggregate(fns ...AggregateFunc) *CompileRecordSelect {
	crs.fns = append(crs.fns, fns...)
	return crs
}

// Scan applies the selector query and scans the result into the given value.
func (crs *CompileRecordSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crs.ctx, "Select")
	if err := crs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompileRecordQuery, *CompileRecordSelect](ctx, crs.CompileRecordQuery, crs, crs.inters, v)
}

func (crs *CompileRecordSelect) sqlScan(ctx context.Context, root *CompileRecordQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(crs.fns))
	for _, fn := range crs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*crs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
