// Code generated by ent, DO NOT EDIT.

package gitrepo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sheason2019/spoved/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldLTE(FieldID, id))
}

// GitURL applies equality check predicate on the "git_url" field. It's identical to GitURLEQ.
func GitURL(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldEQ(FieldGitURL, v))
}

// GitURLEQ applies the EQ predicate on the "git_url" field.
func GitURLEQ(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldEQ(FieldGitURL, v))
}

// GitURLNEQ applies the NEQ predicate on the "git_url" field.
func GitURLNEQ(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldNEQ(FieldGitURL, v))
}

// GitURLIn applies the In predicate on the "git_url" field.
func GitURLIn(vs ...string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldIn(FieldGitURL, vs...))
}

// GitURLNotIn applies the NotIn predicate on the "git_url" field.
func GitURLNotIn(vs ...string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldNotIn(FieldGitURL, vs...))
}

// GitURLGT applies the GT predicate on the "git_url" field.
func GitURLGT(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldGT(FieldGitURL, v))
}

// GitURLGTE applies the GTE predicate on the "git_url" field.
func GitURLGTE(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldGTE(FieldGitURL, v))
}

// GitURLLT applies the LT predicate on the "git_url" field.
func GitURLLT(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldLT(FieldGitURL, v))
}

// GitURLLTE applies the LTE predicate on the "git_url" field.
func GitURLLTE(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldLTE(FieldGitURL, v))
}

// GitURLContains applies the Contains predicate on the "git_url" field.
func GitURLContains(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldContains(FieldGitURL, v))
}

// GitURLHasPrefix applies the HasPrefix predicate on the "git_url" field.
func GitURLHasPrefix(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldHasPrefix(FieldGitURL, v))
}

// GitURLHasSuffix applies the HasSuffix predicate on the "git_url" field.
func GitURLHasSuffix(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldHasSuffix(FieldGitURL, v))
}

// GitURLEqualFold applies the EqualFold predicate on the "git_url" field.
func GitURLEqualFold(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldEqualFold(FieldGitURL, v))
}

// GitURLContainsFold applies the ContainsFold predicate on the "git_url" field.
func GitURLContainsFold(v string) predicate.GitRepo {
	return predicate.GitRepo(sql.FieldContainsFold(FieldGitURL, v))
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.GitRepo {
	return predicate.GitRepo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProjectsTable, ProjectsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.Project) predicate.GitRepo {
	return predicate.GitRepo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProjectsTable, ProjectsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GitRepo) predicate.GitRepo {
	return predicate.GitRepo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GitRepo) predicate.GitRepo {
	return predicate.GitRepo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GitRepo) predicate.GitRepo {
	return predicate.GitRepo(func(s *sql.Selector) {
		p(s.Not())
	})
}
