// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sheason2019/spoved/ent/compilerecord"
)

// CompileRecord is the model entity for the CompileRecord schema.
type CompileRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode int `json:"status_code,omitempty"`
	// Output holds the value of the "output" field.
	Output string `json:"output,omitempty"`
	// Branch holds the value of the "branch" field.
	Branch string `json:"branch,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompileRecordQuery when eager-loading is set.
	Edges CompileRecordEdges `json:"edges"`
}

// CompileRecordEdges holds the relations/edges for other nodes in the graph.
type CompileRecordEdges struct {
	// Operator holds the value of the operator edge.
	Operator []*User `json:"operator,omitempty"`
	// Project holds the value of the project edge.
	Project []*Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading.
func (e CompileRecordEdges) OperatorOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Operator, nil
	}
	return nil, &NotLoadedError{edge: "operator"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading.
func (e CompileRecordEdges) ProjectOrErr() ([]*Project, error) {
	if e.loadedTypes[1] {
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompileRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case compilerecord.FieldID, compilerecord.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case compilerecord.FieldVersion, compilerecord.FieldImage, compilerecord.FieldOutput, compilerecord.FieldBranch:
			values[i] = new(sql.NullString)
		case compilerecord.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CompileRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompileRecord fields.
func (cr *CompileRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case compilerecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case compilerecord.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				cr.Version = value.String
			}
		case compilerecord.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				cr.Image = value.String
			}
		case compilerecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case compilerecord.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				cr.StatusCode = int(value.Int64)
			}
		case compilerecord.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				cr.Output = value.String
			}
		case compilerecord.FieldBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch", values[i])
			} else if value.Valid {
				cr.Branch = value.String
			}
		}
	}
	return nil
}

// QueryOperator queries the "operator" edge of the CompileRecord entity.
func (cr *CompileRecord) QueryOperator() *UserQuery {
	return NewCompileRecordClient(cr.config).QueryOperator(cr)
}

// QueryProject queries the "project" edge of the CompileRecord entity.
func (cr *CompileRecord) QueryProject() *ProjectQuery {
	return NewCompileRecordClient(cr.config).QueryProject(cr)
}

// Update returns a builder for updating this CompileRecord.
// Note that you need to call CompileRecord.Unwrap() before calling this method if this CompileRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CompileRecord) Update() *CompileRecordUpdateOne {
	return NewCompileRecordClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CompileRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CompileRecord) Unwrap() *CompileRecord {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompileRecord is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CompileRecord) String() string {
	var builder strings.Builder
	builder.WriteString("CompileRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("version=")
	builder.WriteString(cr.Version)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(cr.Image)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", cr.StatusCode))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(cr.Output)
	builder.WriteString(", ")
	builder.WriteString("branch=")
	builder.WriteString(cr.Branch)
	builder.WriteByte(')')
	return builder.String()
}

// CompileRecords is a parsable slice of CompileRecord.
type CompileRecords []*CompileRecord

func (cr CompileRecords) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
